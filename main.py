import os
import logging
import google.generativeai as genai
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# --- 1. ุงูุฅุนุฏุงุฏุงุช ููุฑุงุกุฉ ุงููุนูููุงุช ุงูุญุณุงุณุฉ ูู ูุชุบูุฑุงุช ุงูุจูุฆุฉ ---
# ูุฐุง ูู ุงูุฃุณููุจ ุงูุตุญูุญ ููุงุณุชุถุงูุฉ. ูุง ุชูุชุจ ุงูููุงุชูุญ ููุง ูุจุงุดุฑุฉ.
# ุณุชุญุชุงุฌ ุฅูู ุถุจุท ูุฐู ุงููุชุบูุฑุงุช ูู ููุญุฉ ุชุญูู ุงูุงุณุชุถุงูุฉ ุงูุฎุงุตุฉ ุจู.
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN", "7885095446:AAHrqDP_AYb3Zk6Omj9eRCzZ-kVS_TlH998") # ุงุณุชุจุฏู ุงููููุฉ ุงูุงูุชุฑุงุถูุฉ ุจุงูุชููู ุงูุฌุฏูุฏ
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyApDdYoP_tFWKBcPRnSsMq3Arrfg0anpgw") # ุงุณุชุจุฏู ุงููููุฉ ุงูุงูุชุฑุงุถูุฉ ุจููุชุงุญ ุฌูุฌู ุงูุฌุฏูุฏ
ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID", "6072979272")) # ุงูุฏู ุญุณุงุจู

# --- 2. ุฅุนุฏุงุฏ ุชุณุฌูู ุงููุนูููุงุช (Logging) ููุชุงุจุนุฉ ุนูู ุงูุจูุช ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- 3. ุฅุนุฏุงุฏ ูุงุฌูุฉ ุจุฑูุฌุฉ ุชุทุจููุงุช Gemini ---
try:
    genai.configure(api_key=GEMINI_API_KEY)
    gemini_model = genai.GenerativeModel('gemini-1.5-flash-latest')
    logger.info("ุชู ุฅุนุฏุงุฏ Gemini AI ุจูุฌุงุญ.")
except Exception as e:
    logger.error(f"ูุดู ูู ุฅุนุฏุงุฏ Gemini AI: {e}")
    gemini_model = None

# --- 4. ุชุนุฑูู ุฏูุงู ุงูุฃูุงูุฑ ูุงูุฑุณุงุฆู (Handlers) ---

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุฅุฑุณุงู ุฑุณุงูุฉ ุชุฑุญูุจ ุนูุฏ ุฅุฑุณุงู ุงููุณุชุฎุฏู /start."""
    user = update.effective_user
    # ุงูุชุญูู ูู ูููุฉ ุงููุณุชุฎุฏู ูุจู ุงูุฑุฏ
    if user.id != ALLOWED_USER_ID:
        logger.warning(f"ุชู ุญุธุฑ ูุญุงููุฉ ูุตูู ูู ูุณุชุฎุฏู ุบูุฑ ูุตุฑุญ ูู: {user.id} ({user.first_name})")
        return # ูุง ุชูู ุจุฃู ุฑุฏ ูุนู

    await update.message.reply_html(
        f"ุฃููุงู ุจู ูุง {user.mention_html()}! ๐\n\nุฃูุง ุจูุช ุฏุฑุฏุดุฉ ุฐูุงุก ุงุตุทูุงุนู. ููููู ุฅุฑุณุงู ุฃู ุณุคุงู ูู ูุณุฃุญุงูู ุงูุฅุฌุงุจุฉ ุนููู.",
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุงูุชุนุงูู ูุน ุฌููุน ุงูุฑุณุงุฆู ุงููุตูุฉ ูู ุงููุณุชุฎุฏู ุงููุตุฑุญ ูู."""
    user_id = update.message.from_user.id
    
    # ููุชุฑ ุฃูุงู: ุชุฌุงูู ุฃู ุฑุณุงูุฉ ููุณุช ูู ุงููุณุชุฎุฏู ุงููุณููุญ ูู
    if user_id != ALLOWED_USER_ID:
        logger.warning(f"ุชู ุชุฌุงูู ุฑุณุงูุฉ ูู ูุณุชุฎุฏู ุบูุฑ ูุตุฑุญ ูู: {user_id}")
        return

    message_text = update.message.text
    logger.info(f"ุฑุณุงูุฉ ูุณุชููุฉ ูู ุงููุณุชุฎุฏู {user_id}: '{message_text}'")

    if not gemini_model:
        await update.message.reply_text("ุนุฐุฑุงูุ ุฎุฏูุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุบูุฑ ูุชุงุญุฉ ุญุงููุงู.")
        return

    # ุฅุฑุณุงู ุฑุณุงูุฉ "ูููุฑ..." ูุฅุนุทุงุก ุงููุณุชุฎุฏู ุฅุญุณุงุณุงู ุจุงูุงุณุชุฌุงุจุฉ
    await context.bot.send_chat_action(chat_id=update.effective_chat.id, action='typing')
    
    try:
        # ุฅุฑุณุงู ุงููุต ุฅูู Gemini ููุญุตูู ุนูู ุฑุฏ
        response = gemini_model.generate_content(message_text)
        ai_response = response.text
    except Exception as e:
        logger.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุงุชุตุงู ุจู Gemini API: {e}")
        ai_response = "ุนุฐุฑุงูุ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ูุนุงูุฌุฉ ุทูุจู. ุงูุฑุฌุงุก ุงููุญุงููุฉ ูุฑุฉ ุฃุฎุฑู."

    # ุฅุฑุณุงู ุฑุฏ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูููุณุชุฎุฏู
    await update.message.reply_text(ai_response)

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุชุณุฌูู ุงูุฃุฎุทุงุก ุงูุชู ุชุณุจุจูุง ุชุญุฏูุซุงุช Telegram."""
    logger.error("ุญุฏุซ ุงุณุชุซูุงุก ุฃุซูุงุก ุงูุชุนุงูู ูุน ุชุญุฏูุซ:", exc_info=context.error)


# --- 5. ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ูุชุดุบูู ุงูุจูุช ---
def main() -> None:
    """ุชุดุบูู ุงูุจูุช."""
    logger.info("๐ ุจุฏุก ุชุดุบูู ุงูุจูุช...")

    # ุงูุชุญูู ูู ูุฌูุฏ ุงูุชููู
    if not TELEGRAM_TOKEN:
        logger.critical("ุฎุทุฃ: ูู ูุชู ุงูุนุซูุฑ ุนูู TELEGRAM_TOKEN. ูุฑุฌู ุถุจุทู ููุชุบูุฑ ุจูุฆุฉ.")
        return
    if not GEMINI_API_KEY:
        logger.critical("ุฎุทุฃ: ูู ูุชู ุงูุนุซูุฑ ุนูู GEMINI_API_KEY. ูุฑุฌู ุถุจุทู ููุชุบูุฑ ุจูุฆุฉ.")
        return
        
    # ุฅูุดุงุก ุงูุชุทุจูู
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # ุฅุถุงูุฉ ุงููุนุงูุฌุงุช (Handlers)
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # ุฅุถุงูุฉ ูุนุงูุฌ ุงูุฃุฎุทุงุก
    application.add_error_handler(error_handler)

    # ุชุดุบูู ุงูุจูุช ุญุชู ูุชู ุฅููุงูู ูุฏููุงู (e.g., Ctrl-C)
    application.run_polling()
    logger.info("๐ ุชู ุฅููุงู ุงูุจูุช.")


if __name__ == "__main__":
    main()
